# Generated by Django 3.1.3 on 2021-03-24 15:26

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import permits.models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='EventPermit',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'created_date',
                    models.DateTimeField(
                        auto_now_add=True, verbose_name='Created date'
                    ),
                ),
                (
                    'modified_date',
                    models.DateTimeField(auto_now=True, verbose_name='Modified date'),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('interested', 'expression of interest'),
                            ('preapproval', 'preapproval pending'),
                            ('waiting_for_application', 'waiting for application'),
                            ('application_received', 'application received'),
                            ('application_verification', 'application verification'),
                            ('application_accepted', 'application accepted'),
                            ('application_rejected', 'application rejected'),
                        ],
                        default='interested',
                        max_length=64,
                        verbose_name='status',
                    ),
                ),
                ('email', models.CharField(max_length=255, verbose_name='email')),
                (
                    'application_received',
                    models.DateTimeField(
                        null=True, verbose_name='Application received'
                    ),
                ),
                (
                    'application_decided',
                    models.DateTimeField(null=True, verbose_name='Notice sent'),
                ),
                (
                    'permit_start',
                    models.DateField(null=True, verbose_name='Permit valid from'),
                ),
                (
                    'permit_end',
                    models.DateField(null=True, verbose_name='Permit valid until'),
                ),
                (
                    'tos_accepted',
                    models.BooleanField(default=False, verbose_name='tos_accepted'),
                ),
                (
                    'agreement_accepted',
                    models.BooleanField(
                        default=False, verbose_name='agreement accepted'
                    ),
                ),
                (
                    'followup_accepted',
                    models.BooleanField(
                        default=False, verbose_name='follow-up accepted'
                    ),
                ),
                (
                    'campaign',
                    models.CharField(
                        choices=[('xhain2021', 'Xhain 2021')],
                        max_length=32,
                        verbose_name='campaign',
                    ),
                ),
                (
                    'category',
                    models.CharField(
                        choices=[
                            ('restaurant', 'restaurant'),
                            ('retail', 'retail'),
                            ('workshop', 'workshop'),
                            ('social', 'social'),
                            ('other', 'miscellaneous'),
                        ],
                        max_length=255,
                        verbose_name='category',
                    ),
                ),
                (
                    'permit_checked',
                    models.BooleanField(default=False, verbose_name='permit checked'),
                ),
                (
                    'permit_check_note',
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name='permit check notes',
                    ),
                ),
                (
                    'traffic_order_checked',
                    models.BooleanField(
                        default=False, verbose_name='traffic order checked'
                    ),
                ),
                (
                    'traffic_order_check_note',
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name='traffic order check notes',
                    ),
                ),
                (
                    'org_name',
                    models.CharField(max_length=255, verbose_name='organisation name'),
                ),
                (
                    'first_name',
                    models.CharField(max_length=255, verbose_name='first name'),
                ),
                (
                    'last_name',
                    models.CharField(max_length=255, verbose_name='last name'),
                ),
                (
                    'phone',
                    models.CharField(
                        blank=True,
                        max_length=32,
                        null=True,
                        verbose_name='telephone number',
                    ),
                ),
                ('address', models.TextField(verbose_name='address')),
                ('date', models.DateField(verbose_name='event date')),
                ('setup_start', models.DateTimeField(verbose_name='setup start time')),
                ('event_start', models.DateTimeField(verbose_name='event start time')),
                ('event_end', models.DateTimeField(verbose_name='event end time')),
                (
                    'teardown_end',
                    models.DateTimeField(verbose_name='teardown end time'),
                ),
                (
                    'num_participants',
                    models.IntegerField(
                        choices=[
                            (0, 'less than 50'),
                            (1, '50 - 200'),
                            (2, '201 - 500'),
                        ],
                        verbose_name='number of participants',
                    ),
                ),
                (
                    'area_category',
                    models.CharField(
                        choices=[('park', 'park'), ('parking', 'parking')],
                        max_length=255,
                        verbose_name='location category',
                    ),
                ),
                (
                    'area',
                    django.contrib.gis.db.models.fields.GeometryField(
                        srid=4326, verbose_name='installation area'
                    ),
                ),
                (
                    'area_park_name',
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, 'Mehringdamm 90'),
                            (1, 'Heilig-Kreuz-Kirche'),
                            (2, 'Elise-Tilse-Park, Bereich am Hallesches Ufer'),
                            (3, 'Mariannenplatz, Rondell'),
                            (4, 'Spreewaldplatz 5/Skalitzer Str.'),
                            (5, 'Spreewaldplatz 5'),
                            (6, 'Görlitzer Park, Platz vor Pamukkale'),
                            (7, 'Görlitzer Park, ehem. Görlitzer Tunnel'),
                            (8, 'Simplonstr. 2, Verkehrsinsel'),
                            (9, 'Wühlischplatz'),
                            (10, 'Görlitzer Park, hinter dem Bauwagen Parkläufer'),
                            (
                                11,
                                'Görlitzer Park, zw. Pamukkale und Jugendverkehrsschule',
                            ),
                            (12, 'Görlitzer Park, vor Görlitzer Str. 1'),
                            (13, 'Görlitzer Park, Eingang Skalitzer Str.'),
                            (14, 'Görlitzer Park, Wiese am Sportplatz Wiener Str. 59A'),
                            (15, 'Görlitzer Park, an der Rodelbahn'),
                            (16, 'Görlitzer Ufer'),
                            (17, 'Ratiborstr. 14 b, Studentenbad'),
                        ],
                        null=True,
                        verbose_name='location park name',
                    ),
                ),
                (
                    'setup_sketch',
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=permits.models.EventPermit.setup_sketch_upload_to,
                        verbose_name='setup sketch',
                    ),
                ),
                ('title', models.CharField(max_length=80, verbose_name='event title')),
                (
                    'description',
                    models.TextField(max_length=200, verbose_name='event announcement'),
                ),
                (
                    'details',
                    models.TextField(max_length=2000, verbose_name='event details'),
                ),
                (
                    'insurance',
                    models.FileField(
                        upload_to=permits.models.EventPermit.insurance_upload_to,
                        verbose_name='proof of insurance',
                    ),
                ),
                (
                    'agreement',
                    models.FileField(
                        upload_to=permits.models.EventPermit.agreement_upload_to,
                        verbose_name='event agreement',
                    ),
                ),
                (
                    'public_benefit',
                    models.FileField(
                        upload_to=permits.models.EventPermit.public_benefit_upload_to,
                        verbose_name='proof of public benefit',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
